{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { configureStore } from '@reduxjs/toolkit';\nimport thunk from \"redux-thunk\";\nimport { getAllPizzasReducer, addPizzaReducer, getPizzaByIdReducer, updatePizzaByIdReducer } from \"./reducers/pizzaReducer\";\nimport { cartReducer } from \"./reducers/cartReducer\";\nimport { registerReducer, loginReducer, getAllUsersReducer } from \"./reducers/userReducer\";\nimport { placeOrderReducer, myOrdersReducer, allUserOrdersReducer } from \"./reducers/orderReducer\";\nimport { getAllStockReducer } from \"./reducers/inventoryReducer\";\nconst rootReducer = combineReducers({\n  getAllPizzasReducer: getAllPizzasReducer,\n  cartReducer: cartReducer,\n  registerReducer: registerReducer,\n  loginReducer: loginReducer,\n  placeOrderReducer: placeOrderReducer,\n  myOrdersReducer: myOrdersReducer,\n  addPizzaReducer: addPizzaReducer,\n  getPizzaByIdReducer: getPizzaByIdReducer,\n  updatePizzaByIdReducer: updatePizzaByIdReducer,\n  allUserOrdersReducer: allUserOrdersReducer,\n  getAllUsersReducer: getAllUsersReducer,\n  getAllStockReducer: getAllStockReducer,\n  mail\n});\nconst cartItems = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst currentUser = localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null; //if there is some data then convert it into JSON array else leave it as an emty array\n//we need to convert because while storing in local storage we had converted it into JSON string for browser\n\nconst initialstate = {\n  cartReducer: {\n    cartItems: cartItems\n  },\n  loginReducer: {\n    currentUser: currentUser\n  }\n};\nconst middleware = [thunk];\nconst store = configureStore({\n  reducer: rootReducer,\n  preloadedState: initialstate,\n  middleware: middleware\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/store.js"],"names":["combineReducers","configureStore","thunk","getAllPizzasReducer","addPizzaReducer","getPizzaByIdReducer","updatePizzaByIdReducer","cartReducer","registerReducer","loginReducer","getAllUsersReducer","placeOrderReducer","myOrdersReducer","allUserOrdersReducer","getAllStockReducer","rootReducer","mail","cartItems","localStorage","getItem","JSON","parse","currentUser","initialstate","middleware","store","reducer","preloadedState"],"mappings":"AAAA,SAASA,eAAT,QAA+B,OAA/B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SAAOC,mBAAP,EACIC,eADJ,EAEIC,mBAFJ,EAGIC,sBAHJ,QAGiC,yBAHjC;AAIA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAASC,eAAT,EAA0BC,YAA1B,EACIC,kBADJ,QAC+B,wBAD/B;AAEA,SAASC,iBAAT,EAA2BC,eAA3B,EACIC,oBADJ,QACiC,yBADjC;AAEA,SAASC,kBAAT,QAAmC,6BAAnC;AAEA,MAAMC,WAAW,GAAGf,eAAe,CAAC;AAChCG,EAAAA,mBAAmB,EAACA,mBADY;AAEhCI,EAAAA,WAAW,EAACA,WAFoB;AAGhCC,EAAAA,eAAe,EAACA,eAHgB;AAIhCC,EAAAA,YAAY,EAACA,YAJmB;AAKhCE,EAAAA,iBAAiB,EAACA,iBALc;AAMhCC,EAAAA,eAAe,EAACA,eANgB;AAOhCR,EAAAA,eAAe,EAAEA,eAPe;AAQhCC,EAAAA,mBAAmB,EAAEA,mBARW;AAShCC,EAAAA,sBAAsB,EAAEA,sBATQ;AAUhCO,EAAAA,oBAAoB,EAAEA,oBAVU;AAWhCH,EAAAA,kBAAkB,EAAEA,kBAXY;AAYhCI,EAAAA,kBAAkB,EAAEA,kBAZY;AAahCE,EAAAA;AAbgC,CAAD,CAAnC;AAgBA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAApC,GAAoF,EAAtG;AACA,MAAMG,WAAW,GAAGJ,YAAY,CAACC,OAAb,CAAqB,aAArB,IAAsCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CAAtC,GAAwF,IAA5G,C,CAEA;AACA;;AAEA,MAAMI,YAAY,GAAC;AAEfhB,EAAAA,WAAW,EAAG;AACVU,IAAAA,SAAS,EAAGA;AADF,GAFC;AAMfR,EAAAA,YAAY,EAAE;AACVa,IAAAA,WAAW,EAAGA;AADJ;AANC,CAAnB;AAaA,MAAME,UAAU,GAAG,CAACtB,KAAD,CAAnB;AACA,MAAMuB,KAAK,GAAGxB,cAAc,CAAC;AAC7ByB,EAAAA,OAAO,EAACX,WADqB;AACRY,EAAAA,cAAc,EAACJ,YADP;AACqBC,EAAAA,UAAU,EAACA;AADhC,CAAD,CAA5B;AAGA,eAAeC,KAAf","sourcesContent":["import { combineReducers} from \"redux\"\nimport {configureStore} from '@reduxjs/toolkit'\nimport thunk from \"redux-thunk\"\n\nimport{getAllPizzasReducer,\n    addPizzaReducer,\n    getPizzaByIdReducer,\n    updatePizzaByIdReducer} from \"./reducers/pizzaReducer\"\nimport {cartReducer} from \"./reducers/cartReducer\"\nimport { registerReducer, loginReducer,\n    getAllUsersReducer, } from \"./reducers/userReducer\"\nimport { placeOrderReducer,myOrdersReducer,\n    allUserOrdersReducer, } from \"./reducers/orderReducer\"\nimport { getAllStockReducer } from \"./reducers/inventoryReducer\"\n\nconst rootReducer = combineReducers({\n    getAllPizzasReducer:getAllPizzasReducer,\n    cartReducer:cartReducer,\n    registerReducer:registerReducer,\n    loginReducer:loginReducer,\n    placeOrderReducer:placeOrderReducer,\n    myOrdersReducer:myOrdersReducer,\n    addPizzaReducer: addPizzaReducer,\n    getPizzaByIdReducer: getPizzaByIdReducer,\n    updatePizzaByIdReducer: updatePizzaByIdReducer,\n    allUserOrdersReducer: allUserOrdersReducer,\n    getAllUsersReducer: getAllUsersReducer,\n    getAllStockReducer :getAllStockReducer ,\n    mail \n});\n\nconst cartItems = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\nconst currentUser = localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null\n\n//if there is some data then convert it into JSON array else leave it as an emty array\n//we need to convert because while storing in local storage we had converted it into JSON string for browser\n\nconst initialstate={\n\n    cartReducer : {\n        cartItems : cartItems\n    },\n\n    loginReducer :{\n        currentUser : currentUser\n    },\n\n}\n\n\nconst middleware = [thunk];\nconst store = configureStore({\nreducer:rootReducer, preloadedState:initialstate, middleware:middleware\n})\nexport default store;"]},"metadata":{},"sourceType":"module"}