{"ast":null,"code":"import axios from \"axios\";\nexport const getAllPizzas = () => async dispatch => {\n  dispatch({\n    type: \"GET_PIZZAS_REQUEST\"\n  });\n\n  try {\n    const response = await axios.get(\"/api/pizzas/getAllPizzas\"); //will continue after the above request is successfully served at the pizzaRouter.js\n\n    dispatch({\n      type: \"GET_PIZZAS_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_PIZZAS_FAIL\",\n      payload: error\n    });\n  }\n};\nexport const addPizza = pizza => async dispatch => {\n  dispatch({\n    type: \"ADD_PIZZAS_REQUEST\"\n  });\n\n  try {\n    await axios.post(\"/api/pizzas/addpizza\", {\n      pizza\n    });\n    dispatch({\n      type: \"ADD_PIZZAS_SUCCESS\"\n    });\n  } catch (err) {\n    dispatch({\n      type: \"ADD_PIZZAS_FAIL\",\n      payload: err\n    });\n  }\n};\nexport const getPizzaById = pizzaId => async dispatch => {\n  dispatch({\n    type: \"GET_PIZZABYID_REQUEST\"\n  });\n\n  try {\n    const response = await axios.post(\"/api/pizzas/getpizzabyid\", {\n      pizzaId\n    });\n    dispatch({\n      type: \"GET_PIZZABYID_SUCCESS\",\n      payload: response.data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"GET_PIZZABYID_FAIL\",\n      payload: err\n    });\n  }\n};\nexport const updatePizza = updatedPizza => async dispatch => {\n  dispatch({\n    type: \"UPDATE_PIZZABYID_REQUEST\"\n  });\n\n  try {\n    const response = await axios.post(\"/api/pizzas/updatepizza\", {\n      updatedPizza\n    });\n    dispatch({\n      type: \"UPDATE_PIZZABYID_SUCCESS\",\n      payload: response.data\n    });\n    window.location.href = \"/admin/pizzalist\";\n  } catch (err) {\n    dispatch({\n      type: \"UPDATE_PIZZABYID_FAIL\",\n      payload: err\n    });\n  }\n};\nexport const deletePizza = pizzaId => async dispatch => {\n  try {\n    await axios.post(\"/api/pizzas/deletepizza\", {\n      pizzaId\n    }); //swal(\"Pizza Deleted Succss!\", \"success\");\n\n    window.location.href = \"/admin/pizzalist\"; // console.log(res);\n  } catch (error) {//swal(\"Errro While Deleteing Pizza\");\n  }\n};\nexport const filterPizza = (searchkey, category) => async dispatch => {\n  let filterdPizza;\n  dispatch({\n    type: \"GET_PIZZAS_REQUEST\"\n  });\n\n  try {\n    const res = await axios.get(\"/api/pizzas/getAllPizzas\");\n    filterdPizza = res.data.filter(pizza => pizza.name.toLowerCase().includes(searchkey));\n\n    if (category !== \"all\") {\n      filterdPizza = res.data.filter(pizza => pizza.category.toLowerCase() === category);\n    }\n\n    dispatch({\n      type: \"GET_PIZZAS_SUCCESS\",\n      payload: filterdPizza\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_PIZZAS_FAIL\",\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/actions/pizzaAction.js"],"names":["axios","getAllPizzas","dispatch","type","response","get","payload","data","error","addPizza","pizza","post","err","getPizzaById","pizzaId","updatePizza","updatedPizza","window","location","href","deletePizza","filterPizza","searchkey","category","filterdPizza","res","filter","name","toLowerCase","includes"],"mappings":"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","sourcesContent":["import axios from \"axios\"\nexport const getAllPizzas = ()=>async(dispatch)=>{\n    dispatch({type:\"GET_PIZZAS_REQUEST\"})\n    try {\n        const response = await axios.get(\"/api/pizzas/getAllPizzas\");\n        //will continue after the above request is successfully served at the pizzaRouter.js\n        dispatch({type:\"GET_PIZZAS_SUCCESS\", payload:response.data})\n    } catch (error) {\n        dispatch({type:\"GET_PIZZAS_FAIL\",payload:error})\n    }\n}\n\nexport const addPizza = (pizza) => async (dispatch) => {\n    dispatch({ type: \"ADD_PIZZAS_REQUEST\" });\n    try {\n      await axios.post(\"/api/pizzas/addpizza\", { pizza });\n      dispatch({ type: \"ADD_PIZZAS_SUCCESS\" });\n    } catch (err) {\n      dispatch({ type: \"ADD_PIZZAS_FAIL\", payload: err });\n    }\n  };\n  \n  export const getPizzaById = (pizzaId) => async (dispatch) => {\n    dispatch({ type: \"GET_PIZZABYID_REQUEST\" });\n    try {\n      const response = await axios.post(\"/api/pizzas/getpizzabyid\", { pizzaId });\n      dispatch({ type: \"GET_PIZZABYID_SUCCESS\", payload: response.data });\n    } catch (err) {\n      dispatch({ type: \"GET_PIZZABYID_FAIL\", payload: err });\n    }\n  };\n  export const updatePizza = (updatedPizza) => async (dispatch) => {\n    dispatch({ type: \"UPDATE_PIZZABYID_REQUEST\" });\n    try {\n      const response = await axios.post(\"/api/pizzas/updatepizza\", {\n        updatedPizza,\n      });\n      dispatch({ type: \"UPDATE_PIZZABYID_SUCCESS\", payload: response.data });\n      window.location.href = \"/admin/pizzalist\";\n    } catch (err) {\n      dispatch({ type: \"UPDATE_PIZZABYID_FAIL\", payload: err });\n    }\n  };\n  \n  export const deletePizza = (pizzaId) => async (dispatch) => {\n    try {\n      await axios.post(\"/api/pizzas/deletepizza\", { pizzaId });\n      //swal(\"Pizza Deleted Succss!\", \"success\");\n      window.location.href = \"/admin/pizzalist\";\n      // console.log(res);\n    } catch (error) {\n      //swal(\"Errro While Deleteing Pizza\");\n    }\n  };\n  \n  export const filterPizza = (searchkey, category) => async (dispatch) => {\n    let filterdPizza;\n    dispatch({ type: \"GET_PIZZAS_REQUEST\" });\n    try {\n      const res = await axios.get(\"/api/pizzas/getAllPizzas\");\n      filterdPizza = res.data.filter((pizza) =>\n        pizza.name.toLowerCase().includes(searchkey)\n      );\n      if (category !== \"all\") {\n        filterdPizza = res.data.filter(\n          (pizza) => pizza.category.toLowerCase() === category\n        );\n      }\n      dispatch({ type: \"GET_PIZZAS_SUCCESS\", payload: filterdPizza });\n    } catch (error) {\n      dispatch({ type: \"GET_PIZZAS_FAIL\", payload: error });\n    }\n  };"]},"metadata":{},"sourceType":"module"}