{"ast":null,"code":"import axios from \"axios\";\nexport const addToCart = (pizza, quantity, variant, increment) => async (dispatch, getState) => {\n  var cartItem = {\n    name: pizza.name,\n    _id: pizza._id,\n    image: pizza.image,\n    variant: variant,\n    quantity: Number(quantity),\n    prices: pizza.prices,\n    price: pizza.prices[0][variant] * quantity,\n    description: pizza.description ? pizza.description : \"\",\n    ingredients: pizza.ingredients ? pizza.ingredients : {}\n  };\n  var stockobject;\n\n  if (pizza.ingredients) //custom pizza\n    {\n      stockobject = {\n        base: pizza.ingredients[\"base\"],\n        sauce: pizza.ingredients[\"sauce\"],\n        cheese: pizza.ingredients[\"cheese\"],\n        veggies: pizza.ingredients[\"veggies\"],\n        qty: increment ? -1 * (quantity / quantity) : quantity / quantity\n      };\n    }\n\n  if (quantity < 1) {\n    dispatch({\n      type: \"DELETE_FROM_CART\",\n      payload: cartItem\n    });\n\n    if (pizza.ingredients) //custom pizza\n      {\n        try {\n          const response = stockobject ? await axios.post(\"/api/inventory/updatestock\", stockobject) : {};\n          response = response;\n          dispatch({\n            type: \"ADD_TO_CART\",\n            payload: cartItem\n          });\n        } catch (error) {\n          console.log(\"error while updating stock..\" + error);\n        }\n      }\n  } else if (quantity > 10) {\n    alert('Maximum quantity 10 per pizzas');\n  } else {\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    try {\n      const response = stockobject ? await axios.post(\"/api/inventory/updatestock\", stockobject) : {};\n      dispatch({\n        type: \"ADD_TO_CART\",\n        payload: cartItem\n      });\n    } catch (error) {\n      console.log(\"error while updating stock..\" + error);\n    }\n  }\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems)); // STORING THE CART ITEMS in browsers local storage\n  //syntax : localStorage.setItem(key, value);\n  //value must be a JSON String\n};\nexport const deleteFromCart = (pizza, quantity, variant) => async (dispatch, getState) => {\n  dispatch({\n    type: \"DELETE_FROM_CART\",\n    payload: pizza\n  });\n\n  if (pizza.ingredients) //custom pizza\n    {\n      var stockobject = {\n        base: pizza.ingredients[\"base\"],\n        sauce: pizza.ingredients[\"sauce\"],\n        cheese: pizza.ingredients[\"cheese\"],\n        veggies: pizza.ingredients[\"veggies\"],\n        qty: quantity\n      };\n\n      try {\n        const response = stockobject ? await axios.post(\"/api/inventory/updatestock\", stockobject) : {};\n      } catch (error) {\n        console.log(\"error while updating stock..\" + error);\n      }\n    }\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems));\n};","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/actions/cartAction.js"],"names":["axios","addToCart","pizza","quantity","variant","increment","dispatch","getState","cartItem","name","_id","image","Number","prices","price","description","ingredients","stockobject","base","sauce","cheese","veggies","qty","type","payload","response","post","error","console","log","alert","localStorage","setItem","JSON","stringify","cartReducer","cartItems","deleteFromCart"],"mappings":"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","sourcesContent":["import axios from \"axios\"\n\nexport const addToCart = (pizza,quantity,variant,increment)=>async(dispatch,getState)=>{\n    var cartItem = {\n      name:pizza.name,\n      _id:pizza._id,\n      image:pizza.image,\n      variant:variant,\n      quantity:Number(quantity),\n      prices:pizza.prices,\n      price: pizza.prices[0][variant]*quantity,\n      description:pizza.description?pizza.description:\"\",  \n      ingredients:pizza.ingredients?pizza.ingredients:{},  \n    };\n    var stockobject;\n    if(pizza.ingredients)//custom pizza\n    {stockobject = {\n      base:pizza.ingredients[\"base\"], \n      sauce:pizza.ingredients[\"sauce\"], \n      cheese:pizza.ingredients[\"cheese\"], \n      veggies:pizza.ingredients[\"veggies\"], \n      qty:increment?-1*(quantity/quantity):(quantity/quantity)}\n    }\n\n    if(quantity<1)\n    {\n      dispatch({type:\"DELETE_FROM_CART\",payload:cartItem})\n    \n      if(pizza.ingredients)//custom pizza\n      {try {\n        \n        const response = stockobject?await axios.post(\"/api/inventory/updatestock\",stockobject):{};\n        response=response;\n        dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n      } catch (error) {\n              console.log(\"error while updating stock..\"+error)  \n      }}\n    \n    }\n\n    else if(quantity>10)\n    {alert('Maximum quantity 10 per pizzas')\n    }\n\n    else{\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    \n\n        try {\n           \n          const response = stockobject?await axios.post(\"/api/inventory/updatestock\",stockobject):{};\n          \n          dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n        } catch (error) {\n                console.log(\"error while updating stock..\"+error)  \n        }\n    }\n\n\n    localStorage.setItem(\n        \"cartItems\",\n        JSON.stringify(getState().cartReducer.cartItems)\n      );\n    // STORING THE CART ITEMS in browsers local storage\n    //syntax : localStorage.setItem(key, value);\n    //value must be a JSON String\n}\n\nexport const deleteFromCart = (pizza,quantity,variant) =>async(dispatch,getState)=>{\n  dispatch({type:\"DELETE_FROM_CART\",payload:pizza})\n  \n  if(pizza.ingredients)//custom pizza\n      {\n        \n        var stockobject = {\n          base:pizza.ingredients[\"base\"], \n          sauce:pizza.ingredients[\"sauce\"], \n          cheese:pizza.ingredients[\"cheese\"], \n          veggies:pizza.ingredients[\"veggies\"], \n          qty:quantity}\n        \n        \n        \n        try {\n         \n        const response = stockobject?await axios.post(\"/api/inventory/updatestock\",stockobject):{};\n        \n      } catch (error) {\n              console.log(\"error while updating stock..\"+error)  \n      }}\n\n\n\n\n  localStorage.setItem(\n    \"cartItems\",\n    JSON.stringify(getState().cartReducer.cartItems)\n  );\n}"]},"metadata":{},"sourceType":"module"}