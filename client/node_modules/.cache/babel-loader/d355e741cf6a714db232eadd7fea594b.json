{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ekamjit singh\\\\Desktop\\\\oibsip_level3task-main\\\\pizza app\\\\client\\\\src\\\\screens\\\\HomeScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Row, Col } from 'react-bootstrap'; //Data imported\n//use this for static data import=> import AllPizza from '../pizza-data'//returns array of pizzas that acts as a temporary database\n//OR\n\nimport { getAllPizzas } from '../actions/pizzaAction';\nimport { getAllStock } from '../actions/inventoryAction'; //componenets imported\n\nimport Pizza from '../components/Pizza'; //pizza card in which data is sent as props\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HomeScreen = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllPizzas()); //dispatch action\n  }, [dispatch]);\n  useEffect(() => {\n    dispatch(getAllStock()); //dispatch action\n  }, [dispatch]);\n  const pizzastate = useSelector(state => state.getAllPizzasReducer); //getting pizza state using useSelector\n\n  const {\n    pizzas,\n    loading,\n    error\n  } = pizzastate; //destructuring state\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"loading....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 23\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Error while loading data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 33\n      }, this) : /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"images/home_custom_baner.png\",\n            style: {\n              \"width\": \"100%\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: pizzas.map(pizza =>\n          /*#__PURE__*/\n          //callback function pizza=>(...)\n          _jsxDEV(Col, {\n            md: 4,\n            style: {\n              marginBottom: \"2%\",\n              marginTop: \"2%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Pizza, {\n              pobj: pizza\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }, this) //array.map(x=>(x+1)) example of array .map function for incrementing all elements by 1\n          //iterates over an array\n          //takes a call back function i=>() as argument\n          //here i is each element of the array\n          //(..) part defines operation to be performed for each element i\n          //NOTE: JS in JSX requires <>{}</> but JSX in JS can be written directly using <></>\n          //Here we are passing each pizza JS element in JSX componenet <Pizza>\n          //Therefore <Pizza pobj={pizza}>\n          )\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(HomeScreen, \"7nI9KoONgumO7BFUiEYyBfyNnR4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = HomeScreen;\nexport default HomeScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomeScreen\");","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/screens/HomeScreen.jsx"],"names":["React","useEffect","useDispatch","useSelector","Container","Row","Col","getAllPizzas","getAllStock","Pizza","HomeScreen","dispatch","pizzastate","state","getAllPizzasReducer","pizzas","loading","error","map","pizza","marginBottom","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC,C,CAEA;AACA;AAEA;;AACA,SAAOC,YAAP,QAA0B,wBAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B,C,CACA;;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CAAwC;;;;;AAGxC,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAErB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACAD,EAAAA,SAAS,CAAC,MAAI;AACVU,IAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR,CADU,CACc;AAC3B,GAFQ,EAEN,CAACI,QAAD,CAFM,CAAT;AAIAV,EAAAA,SAAS,CAAC,MAAI;AACVU,IAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR,CADU,CACa;AAC1B,GAFQ,EAEN,CAACG,QAAD,CAFM,CAAT;AAMA,QAAMC,UAAU,GAAGT,WAAW,CAAEU,KAAD,IAASA,KAAK,CAACC,mBAAhB,CAA9B,CAbqB,CAa6C;;AAClE,QAAM;AAACC,IAAAA,MAAD;AAAQC,IAAAA,OAAR;AAAgBC,IAAAA;AAAhB,MAAuBL,UAA7B,CAdqB,CAcmB;;AAExC,sBACA;AAAA,2BACI,QAAC,SAAD;AAAA,gBACKI,OAAO,gBAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAF,GACKC,KAAK,gBAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAF,gBAGN,QAAC,SAAD;AAAA,gCACA,QAAC,GAAD;AAAA,iCAEI;AAAK,YAAA,GAAG,EAAC,8BAAT;AAAwC,YAAA,KAAK,EAAE;AAAC,uBAAQ;AAAT;AAA/C;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBADA,eAMA,QAAC,GAAD;AAAA,oBACKF,MAAM,CAACG,GAAP,CAAWC,KAAK;AAAA;AAAG;AAChB,kBAAC,GAAD;AAAK,YAAA,EAAE,EAAE,CAAT;AAAY,YAAA,KAAK,EAAE;AAACC,cAAAA,YAAY,EAAC,IAAd;AAAoBC,cAAAA,SAAS,EAAC;AAA9B,aAAnB;AAAA,mCACI,QAAC,KAAD;AAAO,cAAA,IAAI,EAAIF;AAAf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADa,CAIb;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAbH;AADL;AAAA;AAAA;AAAA;AAAA,gBANA;AAAA;AAAA;AAAA;AAAA;AAAA;AALhB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADA;AAmCH,CAnDD;;GAAMT,U;UAEeR,W,EAWEC,W;;;KAbjBO,U;AAqDN,eAAeA,UAAf","sourcesContent":["import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport { Container, Row, Col } from 'react-bootstrap'\n\n//Data imported\n//use this for static data import=> import AllPizza from '../pizza-data'//returns array of pizzas that acts as a temporary database\n\n//OR\nimport{getAllPizzas} from '../actions/pizzaAction' \nimport { getAllStock } from '../actions/inventoryAction'\n//componenets imported\nimport Pizza from '../components/Pizza' //pizza card in which data is sent as props\n\n\nconst HomeScreen = () => {\n\n    const dispatch = useDispatch()\n    useEffect(()=>{\n        dispatch(getAllPizzas())//dispatch action\n    }, [dispatch])\n\n    useEffect(()=>{\n        dispatch(getAllStock())//dispatch action\n    }, [dispatch])\n\n\n\n    const pizzastate = useSelector((state)=>state.getAllPizzasReducer)//getting pizza state using useSelector\n    const {pizzas,loading,error}=pizzastate //destructuring state\n    \n    return (\n    <>\n        <Container>\n            {loading? <h1>loading....</h1>\n                        :error? <h1>Error while loading data</h1>\n                            :\n                        \n                        <Container>\n                        <Row>\n\n                            <img src=\"images/home_custom_baner.png\" style={{\"width\":\"100%\"}}></img>\n\n                        </Row>\n                        <Row>\n                            {pizzas.map(pizza=>(//callback function pizza=>(...)\n                                <Col md={4} style={{marginBottom:\"2%\", marginTop:\"2%\"}}>\n                                    <Pizza pobj = {pizza}/> \n                                </Col>\n                                //array.map(x=>(x+1)) example of array .map function for incrementing all elements by 1\n                                //iterates over an array\n                                //takes a call back function i=>() as argument\n                                //here i is each element of the array\n                                //(..) part defines operation to be performed for each element i\n\n                                //NOTE: JS in JSX requires <>{}</> but JSX in JS can be written directly using <></>\n\n                                //Here we are passing each pizza JS element in JSX componenet <Pizza>\n                                //Therefore <Pizza pobj={pizza}>\n                            ))}\n                        </Row>\n                        </Container>\n            }\n        </Container>\n    </>\n  )\n}\n\nexport default HomeScreen"]},"metadata":{},"sourceType":"module"}