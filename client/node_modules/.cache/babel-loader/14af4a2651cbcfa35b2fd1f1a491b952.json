{"ast":null,"code":"export const addToCart = (pizza, quantity, variant) => async (dispatch, getState) => {\n  var cartItem = {\n    name: pizza.name,\n    _id: pizza._id,\n    image: pizza.image,\n    variant: variant,\n    quantity: Number(quantity),\n    prices: pizza.prices,\n    price: pizza.prices[0][variant] * quantity,\n    description: pizza.description ? pizza.description : \"\",\n    ingredients: pizza.ingredients ? pizza.ingredients : {}\n  };\n  var stockobject = {\n    base: pizza.ingredients[\"base\"],\n    sauce: sauce,\n    cheese: cheese,\n    veggies: veggies,\n    qty: 1 / -1\n  };\n\n  if (quantity < 1) {\n    dispatch({\n      type: \"DELETE_FROM_CART\",\n      payload: cartItem\n    });\n  } else if (quantity > 10) {\n    alert('Maximum quantity 10 per pizzas');\n  } else {\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    try {\n      const response = await axios.post(\"/api/orders/placeOrder\", stockobject);\n      dispatch({\n        type: \"ADD_TO_CART\",\n        payload: cartItem\n      });\n    } catch (error) {}\n  }\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems)); // STORING THE CART ITEMS in browsers local storage\n  //syntax : localStorage.setItem(key, value);\n  //value must be a JSON String\n};\nexport const deleteFromCart = pizza => async (dispatch, getState) => {\n  dispatch({\n    type: \"DELETE_FROM_CART\",\n    payload: pizza\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems));\n};","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/actions/cartAction.js"],"names":["addToCart","pizza","quantity","variant","dispatch","getState","cartItem","name","_id","image","Number","prices","price","description","ingredients","stockobject","base","sauce","cheese","veggies","qty","type","payload","alert","response","axios","post","error","localStorage","setItem","JSON","stringify","cartReducer","cartItems","deleteFromCart"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAOC,QAAP,EAAgBC,OAAhB,KAA0B,OAAMC,QAAN,EAAeC,QAAf,KAA0B;AACzE,MAAIC,QAAQ,GAAG;AACbC,IAAAA,IAAI,EAACN,KAAK,CAACM,IADE;AAEbC,IAAAA,GAAG,EAACP,KAAK,CAACO,GAFG;AAGbC,IAAAA,KAAK,EAACR,KAAK,CAACQ,KAHC;AAIbN,IAAAA,OAAO,EAACA,OAJK;AAKbD,IAAAA,QAAQ,EAACQ,MAAM,CAACR,QAAD,CALF;AAMbS,IAAAA,MAAM,EAACV,KAAK,CAACU,MANA;AAObC,IAAAA,KAAK,EAAEX,KAAK,CAACU,MAAN,CAAa,CAAb,EAAgBR,OAAhB,IAAyBD,QAPnB;AAQbW,IAAAA,WAAW,EAACZ,KAAK,CAACY,WAAN,GAAkBZ,KAAK,CAACY,WAAxB,GAAoC,EARnC;AASbC,IAAAA,WAAW,EAACb,KAAK,CAACa,WAAN,GAAkBb,KAAK,CAACa,WAAxB,GAAoC;AATnC,GAAf;AAYA,MAAIC,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAACf,KAAK,CAACa,WAAN,CAAkB,MAAlB,CADW;AAEhBG,IAAAA,KAAK,EAACA,KAFU;AAGhBC,IAAAA,MAAM,EAACA,MAHS;AAIhBC,IAAAA,OAAO,EAACA,OAJQ;AAKhBC,IAAAA,GAAG,EAAC,IAAE,CAAC;AALS,GAAlB;;AAQA,MAAGlB,QAAQ,GAAC,CAAZ,EACA;AACEE,IAAAA,QAAQ,CAAC;AAACiB,MAAAA,IAAI,EAAC,kBAAN;AAAyBC,MAAAA,OAAO,EAAChB;AAAjC,KAAD,CAAR;AACD,GAHD,MAKK,IAAGJ,QAAQ,GAAC,EAAZ,EACL;AAACqB,IAAAA,KAAK,CAAC,gCAAD,CAAL;AACA,GAFI,MAID;AACJ;AAGA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAN,CAAW,wBAAX,EAAoCX,WAApC,CAAvB;AACAX,MAAAA,QAAQ,CAAC;AAACiB,QAAAA,IAAI,EAAC,aAAN;AAAoBC,QAAAA,OAAO,EAAChB;AAA5B,OAAD,CAAR;AACD,KAHD,CAGE,OAAOqB,KAAP,EAAc,CAEf;AASA;;AACDC,EAAAA,YAAY,CAACC,OAAb,CACI,WADJ,EAEIC,IAAI,CAACC,SAAL,CAAe1B,QAAQ,GAAG2B,WAAX,CAAuBC,SAAtC,CAFJ,EAjDyE,CAqDzE;AACA;AACA;AACH,CAxDM;AA0DP,OAAO,MAAMC,cAAc,GAAIjC,KAAD,IAAU,OAAMG,QAAN,EAAeC,QAAf,KAA0B;AAChED,EAAAA,QAAQ,CAAC;AAACiB,IAAAA,IAAI,EAAC,kBAAN;AAAyBC,IAAAA,OAAO,EAACrB;AAAjC,GAAD,CAAR;AACA2B,EAAAA,YAAY,CAACC,OAAb,CACE,WADF,EAEEC,IAAI,CAACC,SAAL,CAAe1B,QAAQ,GAAG2B,WAAX,CAAuBC,SAAtC,CAFF;AAID,CANM","sourcesContent":["export const addToCart = (pizza,quantity,variant)=>async(dispatch,getState)=>{\n    var cartItem = {\n      name:pizza.name,\n      _id:pizza._id,\n      image:pizza.image,\n      variant:variant,\n      quantity:Number(quantity),\n      prices:pizza.prices,\n      price: pizza.prices[0][variant]*quantity,\n      description:pizza.description?pizza.description:\"\",  \n      ingredients:pizza.ingredients?pizza.ingredients:{},  \n    };\n\n    var stockobject = {\n      base:pizza.ingredients[\"base\"], \n      sauce:sauce, \n      cheese:cheese, \n      veggies:veggies, \n      qty:1/-1}\n\n\n    if(quantity<1)\n    {\n      dispatch({type:\"DELETE_FROM_CART\",payload:cartItem})\n    }\n\n    else if(quantity>10)\n    {alert('Maximum quantity 10 per pizzas')\n    }\n\n    else{\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    \n\n    try {\n      const response = await axios.post(\"/api/orders/placeOrder\",stockobject)\n      dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    } catch (error) {\n                \n    }\n  \n  \n  \n  \n  \n  \n  \n  \n    }\n    localStorage.setItem(\n        \"cartItems\",\n        JSON.stringify(getState().cartReducer.cartItems)\n      );\n    // STORING THE CART ITEMS in browsers local storage\n    //syntax : localStorage.setItem(key, value);\n    //value must be a JSON String\n}\n\nexport const deleteFromCart = (pizza) =>async(dispatch,getState)=>{\n  dispatch({type:\"DELETE_FROM_CART\",payload:pizza})\n  localStorage.setItem(\n    \"cartItems\",\n    JSON.stringify(getState().cartReducer.cartItems)\n  );\n}"]},"metadata":{},"sourceType":"module"}