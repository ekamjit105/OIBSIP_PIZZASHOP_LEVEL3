{"ast":null,"code":"import axios from \"axios\";\nexport const addToCart = (pizza, quantity, variant) => async (dispatch, getState) => {\n  var cartItem = {\n    name: pizza.name,\n    _id: pizza._id,\n    image: pizza.image,\n    variant: variant,\n    quantity: Number(quantity),\n    prices: pizza.prices,\n    price: pizza.prices[0][variant] * quantity,\n    description: pizza.description ? pizza.description : \"\",\n    ingredients: pizza.ingredients ? pizza.ingredients : {}\n  };\n  var stockobject = {};\n\n  if (pizza.ingredients) {\n    stockobject = {\n      base: pizza.ingredients[\"base\"],\n      sauce: pizza.ingredients[\"sauce\"],\n      cheese: pizza.ingredients[\"cheese\"],\n      veggies: pizza.ingredients[\"veggies\"],\n      qty: -1 * quantity\n    };\n  }\n\n  console.log(\"stockobject created\");\n  console.log(stockobject);\n\n  if (quantity < 1) {\n    dispatch({\n      type: \"DELETE_FROM_CART\",\n      payload: cartItem\n    });\n  } else if (quantity > 10) {\n    alert('Maximum quantity 10 per pizzas');\n  } else {\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    try {\n      console.log(\"sending stock object..\", stockobject);\n      stcok;\n      const response = await axios.post(\"/api/inventory/updatestock\", stockobject);\n      dispatch({\n        type: \"ADD_TO_CART\",\n        payload: cartItem\n      });\n    } catch (error) {\n      console.log(\"error while updating stock..\" + error);\n    }\n  }\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems)); // STORING THE CART ITEMS in browsers local storage\n  //syntax : localStorage.setItem(key, value);\n  //value must be a JSON String\n};\nexport const deleteFromCart = pizza => async (dispatch, getState) => {\n  dispatch({\n    type: \"DELETE_FROM_CART\",\n    payload: pizza\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems));\n};","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/actions/cartAction.js"],"names":["axios","addToCart","pizza","quantity","variant","dispatch","getState","cartItem","name","_id","image","Number","prices","price","description","ingredients","stockobject","base","sauce","cheese","veggies","qty","console","log","type","payload","alert","stcok","response","post","error","localStorage","setItem","JSON","stringify","cartReducer","cartItems","deleteFromCart"],"mappings":"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","sourcesContent":["import axios from \"axios\"\n\nexport const addToCart = (pizza,quantity,variant)=>async(dispatch,getState)=>{\n    var cartItem = {\n      name:pizza.name,\n      _id:pizza._id,\n      image:pizza.image,\n      variant:variant,\n      quantity:Number(quantity),\n      prices:pizza.prices,\n      price: pizza.prices[0][variant]*quantity,\n      description:pizza.description?pizza.description:\"\",  \n      ingredients:pizza.ingredients?pizza.ingredients:{},  \n    };\n    var stockobject={}\n    if(pizza.ingredients)\n    {stockobject = {\n      base:pizza.ingredients[\"base\"], \n      sauce:pizza.ingredients[\"sauce\"], \n      cheese:pizza.ingredients[\"cheese\"], \n      veggies:pizza.ingredients[\"veggies\"], \n      qty:-1*quantity}\n    }\nconsole.log(\"stockobject created\")\nconsole.log(stockobject)\n\n    if(quantity<1)\n    {\n      dispatch({type:\"DELETE_FROM_CART\",payload:cartItem})\n    }\n\n    else if(quantity>10)\n    {alert('Maximum quantity 10 per pizzas')\n    }\n\n    else{\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    \n\n        try {\n          console.log(\"sending stock object..\",stockobject)\n          stcok\n          const response = await axios.post(\"/api/inventory/updatestock\",stockobject)\n          \n          dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n        } catch (error) {\n                console.log(\"error while updating stock..\"+error)  \n        }\n    }\n\n\n    localStorage.setItem(\n        \"cartItems\",\n        JSON.stringify(getState().cartReducer.cartItems)\n      );\n    // STORING THE CART ITEMS in browsers local storage\n    //syntax : localStorage.setItem(key, value);\n    //value must be a JSON String\n}\n\nexport const deleteFromCart = (pizza) =>async(dispatch,getState)=>{\n  dispatch({type:\"DELETE_FROM_CART\",payload:pizza})\n  localStorage.setItem(\n    \"cartItems\",\n    JSON.stringify(getState().cartReducer.cartItems)\n  );\n}"]},"metadata":{},"sourceType":"module"}