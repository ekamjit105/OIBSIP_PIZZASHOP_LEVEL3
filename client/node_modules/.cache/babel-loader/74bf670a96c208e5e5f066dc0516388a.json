{"ast":null,"code":"import axios from \"axios\";\nexport const addToCart = (pizza, quantity, variant, increment) => async (dispatch, getState) => {\n  var cartItem = {\n    name: pizza.name,\n    _id: pizza._id,\n    image: pizza.image,\n    variant: variant,\n    quantity: Number(quantity),\n    prices: pizza.prices,\n    price: pizza.prices[0][variant] * quantity,\n    description: pizza.description ? pizza.description : \"\",\n    ingredients: pizza.ingredients ? pizza.ingredients : {}\n  };\n  var stockobject;\n\n  if (pizza.ingredients) //custom pizza\n    {\n      stockobject = {\n        base: pizza.ingredients[\"base\"],\n        sauce: pizza.ingredients[\"sauce\"],\n        cheese: pizza.ingredients[\"cheese\"],\n        veggies: pizza.ingredients[\"veggies\"],\n        qty: increment ? -1 * (quantity / quantity) : quantity / quantity\n      };\n    }\n\n  console.log(\"stockobject created\");\n  console.log(stockobject);\n\n  if (quantity < 1) {\n    dispatch({\n      type: \"DELETE_FROM_CART\",\n      payload: cartItem\n    });\n  } else if (quantity > 10) {\n    alert('Maximum quantity 10 per pizzas');\n  } else {\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    try {\n      console.log(\"sending stock object..\", stockobject);\n      const response = stockobject ? await axios.post(\"/api/inventory/updatestock\", stockobject) : {};\n      dispatch({\n        type: \"ADD_TO_CART\",\n        payload: cartItem\n      });\n    } catch (error) {\n      console.log(\"error while updating stock..\" + error);\n    }\n  }\n\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems)); // STORING THE CART ITEMS in browsers local storage\n  //syntax : localStorage.setItem(key, value);\n  //value must be a JSON String\n};\nexport const deleteFromCart = pizza => async (dispatch, getState) => {\n  dispatch({\n    type: \"DELETE_FROM_CART\",\n    payload: pizza\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(getState().cartReducer.cartItems));\n};","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/actions/cartAction.js"],"names":["axios","addToCart","pizza","quantity","variant","increment","dispatch","getState","cartItem","name","_id","image","Number","prices","price","description","ingredients","stockobject","base","sauce","cheese","veggies","qty","console","log","type","payload","alert","response","post","error","localStorage","setItem","JSON","stringify","cartReducer","cartItems","deleteFromCart"],"mappings":"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","sourcesContent":["import axios from \"axios\"\n\nexport const addToCart = (pizza,quantity,variant,increment)=>async(dispatch,getState)=>{\n    var cartItem = {\n      name:pizza.name,\n      _id:pizza._id,\n      image:pizza.image,\n      variant:variant,\n      quantity:Number(quantity),\n      prices:pizza.prices,\n      price: pizza.prices[0][variant]*quantity,\n      description:pizza.description?pizza.description:\"\",  \n      ingredients:pizza.ingredients?pizza.ingredients:{},  \n    };\n    var stockobject;\n    if(pizza.ingredients)//custom pizza\n    {stockobject = {\n      base:pizza.ingredients[\"base\"], \n      sauce:pizza.ingredients[\"sauce\"], \n      cheese:pizza.ingredients[\"cheese\"], \n      veggies:pizza.ingredients[\"veggies\"], \n      qty:increment?-1*(quantity/quantity):(quantity/quantity)}\n    }\nconsole.log(\"stockobject created\")\nconsole.log(stockobject)\n\n    if(quantity<1)\n    {\n      dispatch({type:\"DELETE_FROM_CART\",payload:cartItem})\n    \n    \n    \n    \n    }\n\n    else if(quantity>10)\n    {alert('Maximum quantity 10 per pizzas')\n    }\n\n    else{\n    //dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n    \n\n        try {\n          console.log(\"sending stock object..\",stockobject)\n           \n          const response = stockobject?await axios.post(\"/api/inventory/updatestock\",stockobject):{};\n          \n          dispatch({type:\"ADD_TO_CART\",payload:cartItem})\n        } catch (error) {\n                console.log(\"error while updating stock..\"+error)  \n        }\n    }\n\n\n    localStorage.setItem(\n        \"cartItems\",\n        JSON.stringify(getState().cartReducer.cartItems)\n      );\n    // STORING THE CART ITEMS in browsers local storage\n    //syntax : localStorage.setItem(key, value);\n    //value must be a JSON String\n}\n\nexport const deleteFromCart = (pizza) =>async(dispatch,getState)=>{\n  dispatch({type:\"DELETE_FROM_CART\",payload:pizza})\n  \n  \n  \n  localStorage.setItem(\n    \"cartItems\",\n    JSON.stringify(getState().cartReducer.cartItems)\n  );\n}"]},"metadata":{},"sourceType":"module"}