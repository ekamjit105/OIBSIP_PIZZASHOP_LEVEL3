{"ast":null,"code":"import axios from 'axios';\nexport const createOrder = (razorpay_payment_id, cartItems, subTotal) => async (dispatch, getState) => {\n  dispatch({\n    type: \"ORDER_CREATE_REQUEST\"\n  });\n  const loginState = getState().loginReducer;\n  const {\n    currentUser\n  } = loginState;\n  const order = {\n    name: currentUser.name,\n    email: currentUser.email,\n    userId: currentUser._id,\n    orderItems: cartItems,\n    orderAmount: subTotal,\n    isDelivered: false,\n    transactionId: razorpay_payment_id\n  };\n\n  try {\n    const response = await axios.post(\"/api/orders/placeOrder\", order);\n    dispatch({\n      type: \"ORDER_CREATE_SUCCESS\",\n      payload: response.data\n    });\n    localStorage.setItem(\"cartItems\", []);\n  } catch (error) {\n    dispatch({\n      type: \"ORDER_CREATE_FAIL\",\n      payload: error\n    });\n  }\n\n  try {\n    const response = await axios.get(\"/api/inventory/getAllStock\"); //will continue after the above request is successfully served at the pizzaRouter.js\n\n    console.log(\"stock from order action\");\n    console.log(response.data);\n    dispatch({\n      type: \"GET_STOCK_SUCCESS\",\n      payload: response.data\n    });\n    const {\n      stock\n    } = getState().getAllStockReducer;\n    console.log(stock); //calculating LOW stock\n\n    var s = \"** STOCK ALERT ** The following stock is low : \";\n\n    for (var i = 0; i < stock.length; i++) {} //now sending mail for updated stock\n\n  } catch (error) {\n    dispatch({\n      type: \"ORDER_CREATE_FAIL\",\n      payload: error\n    });\n  }\n};\nexport const getMyOrders = () => async (dispatch, getState) => {\n  dispatch({\n    type: \"GET_ORDER_REQUEST\"\n  });\n\n  try {\n    const {\n      currentUser\n    } = getState().loginReducer;\n    const userId = currentUser._id;\n    const response = await axios.post(\"/api/orders/myOrders\", {\n      userId\n    });\n    dispatch({\n      type: \"GET_ORDER_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"GET_ORDER_FAIL\",\n      payload: error\n    });\n  }\n};\nexport const getAllOrders = () => async (dispatch, getState) => {\n  // const currentUser = getState().loginUserReducer.currentUser;\n  dispatch({\n    type: \"ALL_ORDER_REQUEST\"\n  });\n\n  try {\n    const response = await axios.get(\"/api/orders/alluserorder\");\n    dispatch({\n      type: \"ALL_ORDER_SUCCESS\",\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: \"ALL_ORDER_FAIL\",\n      payload: error\n    });\n  }\n};\nexport const deliverOrder = orderid => async (dispatch, getState) => {\n  // const currentUser = getState().loginUserReducer.currentUser;\n  dispatch({\n    type: \"GET_ALL_ORDER_REQUEST\"\n  });\n\n  try {\n    await axios.post(\"/api/orders/deliverorder\", {\n      orderid\n    });\n    alert(\"Delivered Success\");\n    const orders = await axios.get(\"/api/orders/alluserorder\");\n    dispatch({\n      type: \"GET_ALL_ORDER_SUCCESS\",\n      payload: orders.data\n    });\n    window.location.href = \"/admin/orderlist\";\n  } catch (error) {\n    dispatch({\n      type: \"GET_ALL_ORDER_FAIL\",\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/actions/orderAction.js"],"names":["axios","createOrder","razorpay_payment_id","cartItems","subTotal","dispatch","getState","type","loginState","loginReducer","currentUser","order","name","email","userId","_id","orderItems","orderAmount","isDelivered","transactionId","response","post","payload","data","localStorage","setItem","error","get","console","log","stock","getAllStockReducer","s","i","length","getMyOrders","getAllOrders","deliverOrder","orderid","alert","orders","window","location","href"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nexport const createOrder = (razorpay_payment_id,cartItems, subTotal) =>async(dispatch,getState)=>{\n    dispatch({type:\"ORDER_CREATE_REQUEST\"})\n    const loginState = getState().loginReducer\n    const {currentUser} = loginState\n    const order ={\n        name:currentUser.name,\n        email:currentUser.email,\n        userId:currentUser._id,\n        orderItems:cartItems,\n        orderAmount:subTotal,\n        isDelivered:false,\n        transactionId:razorpay_payment_id\n    }\n    try {\n        const response = await axios.post(\"/api/orders/placeOrder\",order)\n        dispatch({type: \"ORDER_CREATE_SUCCESS\",payload:response.data})\n        localStorage.setItem(\"cartItems\",[])\n    } catch (error) {\n        dispatch({type:\"ORDER_CREATE_FAIL\",payload:error})        \n    }\n\n    try {\n      const response = await axios.get(\"/api/inventory/getAllStock\");\n        //will continue after the above request is successfully served at the pizzaRouter.js\n        console.log(\"stock from order action\")\n        console.log(response.data)\n        dispatch({type:\"GET_STOCK_SUCCESS\", payload:response.data})\n        const {stock} = getState().getAllStockReducer\n        console.log(stock);\n\n\n        //calculating LOW stock\n        var s=\"** STOCK ALERT ** The following stock is low : \";\n\n        for(var i=0;i<stock.length;i++)\n        {\n\n        }\n\n\n\n        //now sending mail for updated stock\n\n\n\n    } catch (error) {\n        dispatch({type:\"ORDER_CREATE_FAIL\",payload:error})        \n    }\n\n\n}\n\n\n\nexport const getMyOrders = () =>async(dispatch,getState)=>{\n \n    dispatch({type:\"GET_ORDER_REQUEST\"})\n    try {\n        const {currentUser} = getState().loginReducer\n       \n        const userId= currentUser._id\n        \n        const response = await axios.post(\"/api/orders/myOrders\",{userId})\n        \n        dispatch({type:\"GET_ORDER_SUCCESS\",payload:response.data})\n    } catch (error) {\n        dispatch({type:\"GET_ORDER_FAIL\",payload:error})\n        \n    }\n}\n\n\n\nexport const getAllOrders = () => async (dispatch, getState) => {\n    // const currentUser = getState().loginUserReducer.currentUser;\n    dispatch({\n      type: \"ALL_ORDER_REQUEST\",\n    });\n    try {\n      const response = await axios.get(\"/api/orders/alluserorder\");\n      dispatch({ type: \"ALL_ORDER_SUCCESS\", payload: response.data });\n    } catch (error) {\n      dispatch({ type: \"ALL_ORDER_FAIL\", payload: error });\n    }\n  };\n  \n  export const deliverOrder = (orderid) => async (dispatch, getState) => {\n    // const currentUser = getState().loginUserReducer.currentUser;\n    dispatch({\n      type: \"GET_ALL_ORDER_REQUEST\",\n    });\n    try {\n      await axios.post(\"/api/orders/deliverorder\", { orderid });\n      alert(\"Delivered Success\");\n      const orders = await axios.get(\"/api/orders/alluserorder\");\n      dispatch({ type: \"GET_ALL_ORDER_SUCCESS\", payload: orders.data });\n      window.location.href = \"/admin/orderlist\";\n    } catch (error) {\n      dispatch({ type: \"GET_ALL_ORDER_FAIL\", payload: error });\n    }\n  };\n  "]},"metadata":{},"sourceType":"module"}