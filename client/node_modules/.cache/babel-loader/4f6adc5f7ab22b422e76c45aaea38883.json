{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ekamjit singh\\\\Desktop\\\\oibsip_level3task-main\\\\pizza app\\\\client\\\\src\\\\screens\\\\RegisterScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Form, Container, Button } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { registerUser } from '../actions/userAction';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegisterScreen = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmpassword, setConfirmPassword] = useState('');\n  const dispatch = useDispatch();\n  const registerState = useSelector(state => state.registerReducer);\n  const {\n    success\n  } = registerState;\n\n  const registerHandler = async () => {\n    if (password !== confirmpassword) {\n      alert(\"paswords do not match!\");\n    } else {\n      /*const user = {name,email,password}\n      dispatch(registerUser(user))\n      success?window.location.href = \"/login\":console.log()\n      */\n      //CHECK IF USER ALREADY EXISTS\n      const reqobj = {\n        email: email\n      };\n      var response = await axios.post(\"/api/users/finduser\", reqobj);\n      setExists(response.data.exists);\n      setChecked(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicName\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n            className: \"text-muted\",\n            children: \"We'll never share your email with anyone else.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          controlId: \"formBasicConfirmPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Confirm Password\",\n            value: confirmpassword,\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: registerHandler,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(RegisterScreen, \"DDXErm9toq7ZVq+x+y3/47GbvXI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RegisterScreen;\nexport default RegisterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterScreen\");","map":{"version":3,"sources":["C:/Users/ekamjit singh/Desktop/oibsip_level3task-main/pizza app/client/src/screens/RegisterScreen.jsx"],"names":["React","Form","Container","Button","useState","registerUser","useSelector","useDispatch","RegisterScreen","name","setName","email","setEmail","password","setPassword","confirmpassword","setConfirmPassword","dispatch","registerState","state","registerReducer","success","registerHandler","alert","reqobj","response","axios","post","setExists","data","exists","setChecked","e","target","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Form, Container, Button} from 'react-bootstrap'\nimport {useState} from 'react'\nimport {registerUser} from '../actions/userAction'\nimport {useSelector, useDispatch } from 'react-redux'\n\nconst RegisterScreen = () => {\n    const [name,setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmpassword, setConfirmPassword] = useState('')\n    \n    \n\n\n    \n\n    const dispatch = useDispatch()\n    const registerState = useSelector((state) => state.registerReducer);\n    const { success } = registerState;\n    \n    const registerHandler = async() =>{\n    \n        if(password!==confirmpassword)\n        {\n            alert(\"paswords do not match!\")\n        }\n        else{\n        /*const user = {name,email,password}\n        dispatch(registerUser(user))\n        success?window.location.href = \"/login\":console.log()\n        */\n\n        //CHECK IF USER ALREADY EXISTS\n\n        const reqobj = {\n          email:email\n        }\n        var response = await axios.post(\"/api/users/finduser\",reqobj);\n        setExists(response.data.exists);\n        setChecked(true);\n\n        }\n   }\n\n    \n\n return (\n    <>\n    \n    <Container>\n        <Form>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n        <Form.Label>Name</Form.Label>\n        <Form.Control type=\"text\" placeholder=\"Enter Name\" value={name} onChange={(e)=>setName(e.target.value)}/>\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">  \n        <Form.Label>Email address</Form.Label>\n        <Form.Control type=\"email\" placeholder=\"Enter email\" value={email} onChange={(e)=>setEmail(e.target.value)}/>\n        <Form.Text className=\"text-muted\">\n          We'll never share your email with anyone else.\n        </Form.Text>\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Password\" value={password} onChange={(e)=>setPassword(e.target.value)}/>\n      </Form.Group> \n      <Form.Group className=\"mb-3\" controlId=\"formBasicConfirmPassword\">\n        <Form.Label>Confirm Password</Form.Label>\n        <Form.Control type=\"password\" placeholder=\"Confirm Password\" value={confirmpassword} onChange={(e)=>setConfirmPassword(e.target.value)}/>\n      </Form.Group>\n      \n      <Button variant=\"primary\" onClick={registerHandler}>\n        Register\n      </Button>\n    </Form>\n    </Container>\n    </>\n  )\n}\n\nexport default RegisterScreen"]},"metadata":{},"sourceType":"module"}